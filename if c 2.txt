Question 13:
Write a Lex and Yacc program to validate an IF condition.

Solution:
Lex file:
%{
#include "y.tab.h"
%}

%%
[0-9]+      { yylval = atoi(yytext); return NUMBER; }
"^"         { return POWER; }
"+"         { return PLUS; }
"-"         { return MINUS; }
"*"         { return MULTIPLY; }
"/"         { return DIVIDE; }
"="         { return EQUAL; }
"("         { return LPAREN; }
")"         { return RPAREN; }
\n          { return EOL; }
[ \t]       ;  // Ignore spaces and tabs
.           { return INVALID; }
%%

int yywrap() {
    return 1; 
}

Yacc file:
%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);

int power(int base, int exp) {
    int result = 1;
    for(int i = 0; i < exp; i++) {
        result *= base;
    }
    return result;
}
%}

%token NUMBER PLUS MINUS MULTIPLY DIVIDE POWER EQUAL LPAREN RPAREN EOL INVALID

%left PLUS MINUS
%left MULTIPLY DIVIDE
%right POWER  // right-associative for exponentiation

%%

input:
    /* empty */
  | input expr EOL     { printf("Result = %d\n", $2); }
  ;

expr:
    expr PLUS expr     { $$ = $1 + $3; }
  | expr MINUS expr    { $$ = $1 - $3; }
  | expr MULTIPLY expr { $$ = $1 * $3; }
  | expr DIVIDE expr   {
                          if ($3 == 0) {
                            yyerror("Division by zero");
                            YYABORT;
                          }
                          $$ = $1 / $3;
                        }
  | expr POWER expr    { $$ = power($1, $3); }
  | LPAREN expr RPAREN { $$ = $2; }
  | NUMBER             { $$ = $1; }
  ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter arithmetic expressions (e.g., 2 ^ 3 + 1):\n");
    yyparse();
    return 0;
}
