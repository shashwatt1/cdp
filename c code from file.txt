Question 11:
Write a Lex program to tokenize C code from a file.

Solution:
%{
#include <stdio.h>
%}

%%

(int|float|char|if|else|for|while)     { printf("Keyword: %s\n", yytext); }     
[a-zA-Z_][a-zA-Z0-9_]*                 { printf("Identifier: %s\n", yytext); }  
[0-9]+(\.[0-9]+)?                      { printf("Number: %s\n", yytext); }      
(\+|\-|\*|\/|==|!=|<=|>=|<|>|=)        { printf("Operator: %s\n", yytext); }    
[\{\}\[\]\(\)\;\,\.\:]                { printf("Punctuation: %s\n", yytext); } 
\".*?\"                                { printf("String: %s\n", yytext); }     
\/\/.*                                 { /* Ignore single-line comments */ }   
[ \t\n]+                               { /* Ignore whitespace */ }             
.                                      { printf("Unknown: %s\n", yytext); }    

%%

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            printf("File open error");
            return 1;
        }
        yyin = file;
    }
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}
